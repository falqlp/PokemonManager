name: Backend CI

on:
  push:
    branches:
      - master
      - prod
    paths:
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 20.x ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # Build pour shared
      - name: Install dependencies for shared
        run: cd backend/shared && npm ci
      - name: Compile TypeScript for shared
        run: cd backend/shared && npm run build

      # Build pour core
      - name: Install dependencies for core
        run: cd backend/core && npm ci
      - name: Compile TypeScript for core
        run: cd backend/core && npm run build

      # Build pour battle-stats
      - name: Install dependencies for battle-stats
        run: cd backend/battle-stats && npm ci
      - name: Compile TypeScript for battle-stats
        run: cd backend/battle-stats && npm run build

  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 20.x ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}


      # Linter pour shared
      - name: Install dependencies for shared
        run: cd backend/shared && npm ci
      - name: Run linter for shared
        run: cd backend/shared && npm run lint:check
      - name: Run format check for shared
        run: cd backend/shared && npm run format:check

      # Linter pour core
      - name: Install dependencies for core
        run: cd backend/core && npm ci
      - name: Run linter for core
        run: cd backend/core && npm run lint:check
      - name: Run format check for core
        run: cd backend/core && npm run format:check

      # Linter pour battle-stats
      - name: Install dependencies for battle-stats
        run: cd backend/battle-stats && npm ci
      - name: Run linter for battle-stats
        run: cd backend/battle-stats && npm run lint:check
      - name: Run format check for battle-stats
        run: cd backend/battle-stats && npm run format:check

  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 20.x ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # Tests pour shared
      - name: Install dependencies for shared
        run: cd backend/shared && npm ci
      - name: Run tests with coverage for shared
        run: cd backend/shared && npm test -- --coverage
        env:
          CI: true

      # Tests pour core
      - name: Install dependencies for core
        run: cd backend/core && npm ci
      - name: Run tests with coverage for core
        run: cd backend/core && npm test -- --coverage
        env:
          CI: true

      # Tests pour battle-stats
      - name: Install dependencies for battle-stats
        run: cd backend/battle-stats && npm ci
      - name: Run tests with coverage for battle-stats
        run: cd backend/battle-stats && npm test -- --coverage
        env:
          CI: true

      # Upload des rapports de couverture Ã  Codecov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: backend/core/coverage/lcov.info
          flags: unittests-core
          name: codecov-core
          fail_ci_if_error: true
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: backend/battle-stats/coverage/lcov.info
          flags: unittests-battle-stats
          name: codecov-battle-stats
          fail_ci_if_error: true
      - name: Upload shared coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: backend/shared/coverage/lcov.info
          flags: unittests-shared
          name: codecov-shared
          fail_ci_if_error: true
